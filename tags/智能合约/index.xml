<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>智能合约 on Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</link><description>Recent content in 智能合约 on Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 18 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>浮点数处理</title><link>https://shuzang.github.io/2020/math-in-solidity/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/math-in-solidity/</guid><description>&lt;p>对 Solidity 中如何进行浮点数的处理做说明。&lt;/p></description></item><item><title>函数修饰词pure和view</title><link>https://shuzang.github.io/2020/pure-and-view-keyword/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/pure-and-view-keyword/</guid><description>转自深入理解Solidity-函数 这两个函数修饰词的作用是告诉编译器函数是否会读取/修改状态，view 表示保证不修改状态，pure 表示保证不</description></item><item><title>可见性与Getter函数</title><link>https://shuzang.github.io/2020/visibility-and-getter-function/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/visibility-and-getter-function/</guid><description>转自：Solidity 0.6.4 中文文档 Solidity 有两种函数调用：内部调用（Internal Function Calls）和外部调用（External Function Calls）。前者指</description></item><item><title>字符串匹配</title><link>https://shuzang.github.io/2020/string-equality-comparison/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/string-equality-comparison/</guid><description>翻译自：Fravoll-String Equality Comparison 比较两个给定字符串是否相等，是 Solidity 编程中最常见的一种情况，但语言本身并没有提供内置函数用于字符串比较，</description></item><item><title>Address checksum</title><link>https://shuzang.github.io/2020/address-checksum/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/address-checksum/</guid><description>在智能合约中显式传入地址类型时，可能会出现如下错误 Address checksum This looks like an address but has an invalid checksum. If this is not used as an address, please prepend &amp;lsquo;00&amp;rsquo;. 关于该问题的一个讨论见 https://github.com/ethereum/EIPs/issues/55 这是因为合约中现在使</description></item><item><title>合约间调用</title><link>https://shuzang.github.io/2019/call-between-contracts/</link><pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/call-between-contracts/</guid><description>之前的实验合约间的调用没有成功，这次就仔细地研究一下合约间地调用机制。分为两种情况 调用者和被调用者在一个sol文件中 调用者和被调用者在不同的</description></item><item><title>智能合约-gas limit问题</title><link>https://shuzang.github.io/2019/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6-gas-limit%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 21 Mar 2019 22:00:00 +0800</pubDate><guid>https://shuzang.github.io/2019/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6-gas-limit%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在搭建的以太坊私链上进行智能合约部署时，出现了以下问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">INFO&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mf">11.690&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nx">Served&lt;/span> &lt;span class="nx">eth_sendTransaction&lt;/span> &lt;span class="nx">reqid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">24&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">684.186&lt;/span>&lt;span class="nx">µs&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;exceeds block gas limit&amp;#34;&lt;/span>
&lt;span class="nb">Error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">exceeds&lt;/span> &lt;span class="nx">block&lt;/span> &lt;span class="nx">gas&lt;/span> &lt;span class="nx">limit&lt;/span> &lt;span class="kc">undefined&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>出现该错误的原因如错误描述，是当前合约所需的gas超过了区块的最大gas。这可能与参数gasLimit有关。在创世区块的配置文件中，我们使用了默认的配置值，为&lt;code>0x2fefd8&lt;/code>，转换为10进制即&lt;code>3141592&lt;/code>。&lt;/p>
&lt;p>注：&lt;a href="http://tool.oschina.net/hexconvert/" target="_blank">在线转换工具&lt;/a>&lt;/p></description></item></channel></rss>