<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>区块链 on Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/</link><description>Recent content in 区块链 on Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 18 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>Solidity-浮点数处理</title><link>https://shuzang.github.io/2020/math-in-solidity/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/math-in-solidity/</guid><description>&lt;p>对 Solidity 中如何进行浮点数的处理做说明。&lt;/p></description></item><item><title>区块链学习7-交易池底层实现</title><link>https://shuzang.github.io/2020/transaction-and-txpool/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/transaction-and-txpool/</guid><description>&lt;p>起源于老师提出的一个问题：区块链是如何处理同时发起的多个请求的。想了想觉得核心是交易池机制，因此准备看一下交易池的原理和实现。&lt;/p></description></item><item><title>Solidity-函数修饰词pure和view</title><link>https://shuzang.github.io/2020/pure-and-view-keyword/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/pure-and-view-keyword/</guid><description>转自深入理解Solidity-函数 这两个函数修饰词的作用是告诉编译器函数是否会读取/修改状态，view 表示保证不修改状态，pure 表示保证不</description></item><item><title>Solidity-可见性与Getter函数</title><link>https://shuzang.github.io/2020/visibility-and-getter-function/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/visibility-and-getter-function/</guid><description>转自：Solidity 0.6.4 中文文档 Solidity 有两种函数调用：内部调用（Internal Function Calls）和外部调用（External Function Calls）。前者指</description></item><item><title>Solidity-字符串匹配</title><link>https://shuzang.github.io/2020/string-equality-comparison/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/string-equality-comparison/</guid><description>翻译自：Fravoll-String Equality Comparison 比较两个给定字符串是否相等，是 Solidity 编程中最常见的一种情况，但语言本身并没有提供内置函数用于字符串比较，</description></item><item><title>面对疫情区块链可以做些什么</title><link>https://shuzang.github.io/2020/what-can-blockchain-do-during-the-covid-19/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/what-can-blockchain-do-during-the-covid-19/</guid><description>这场年初爆发的疫情在国内控制住以后，反而开始在全世界其它国家蔓延，如大数据、5G等技术均在当前这场疫情中产生了自己的作用，区块链能做些什么，</description></item><item><title>Solidity-Address checksum</title><link>https://shuzang.github.io/2020/solidity-address-checksum/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/solidity-address-checksum/</guid><description>在智能合约中显式传入地址类型时，可能会出现如下错误 Address checksum This looks like an address but has an invalid checksum. If this is not used as an address, please prepend &amp;lsquo;00&amp;rsquo;. 关于该问题的一个讨论见 https://github.com/ethereum/EIPs/issues/55 这是因为合约中现在使</description></item><item><title>区块链方向有参考价值的文章收集</title><link>https://shuzang.github.io/2019/articles-about-blockchain/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/articles-about-blockchain/</guid><description>很多区块链领域极有启发性的文章或者介绍极为详细的文章都很值得保存，以前直接将文章完整的转载过来，但最近发现这种方法占用空间而且毫无意义，因此</description></item><item><title>Solidity-合约间调用</title><link>https://shuzang.github.io/2019/call-between-contracts/</link><pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/call-between-contracts/</guid><description>之前的实验合约间的调用没有成功，这次就仔细地研究一下合约间地调用机制。分为两种情况 调用者和被调用者在一个sol文件中 调用者和被调用者在不同的</description></item><item><title>以太坊开发8-Truffle框架安装使用</title><link>https://shuzang.github.io/2019/use-truffle-develop-ethereum-project/</link><pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/use-truffle-develop-ethereum-project/</guid><description>Truffle和Ganache的安装使用 1. 安装Truffle 在Ubuntu18.04 下安装运行，要求Node.js版本高于v8.9.4 1 2 3</description></item><item><title>区块链学习6-IBFT共识</title><link>https://shuzang.github.io/2019/ibft-consensus/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/ibft-consensus/</guid><description>AMIS公司提出的 Istanbul Byzantine Fault Tolerance Consensus（简称IBFT或Istanbul BFT），是一个基于PBFT的交易一致性的共识。因为要考虑可能发</description></item><item><title>提取以太坊的区块产生时间</title><link>https://shuzang.github.io/2019/extract-the-block-generation-time-of-ethereum/</link><pubDate>Fri, 05 Apr 2019 21:35:00 +0800</pubDate><guid>https://shuzang.github.io/2019/extract-the-block-generation-time-of-ethereum/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>目的是提取以太坊的区块产生时间形成数据集，初步的思路有两种：&lt;/p>
&lt;ul>
&lt;li>爬取以太坊区块浏览器中的时间数据，然后格式化形成数据集输出&lt;/li>
&lt;li>同步以太坊的所有区块（头），利用以太坊本身提供的接口提取每个区块的时间戳信息，然后将时间戳转换为真实的日期格式形成数据集输出，&lt;a href="https://tool.lu/timestamp/" target="_blank">时间戳转换在线工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>查询资料过程中，了解到谷歌已提供以太坊的区块信息数据集&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。虽然数据集本身没有时间信息，但可以导出时间戳进行转换，了解到谷歌使用的工具是&lt;a href="https://github.com/blockchain-etl/ethereum-etl#blockscsv" target="_blank">ethereum-etl&lt;/a>，故最终的解决方案是：使用ethereum-etl导出时间戳，编写Python程序转换时间戳并导出数据集。&lt;/p></description></item><item><title>以太坊开发7-swarm存储网络使用</title><link>https://shuzang.github.io/2019/swarm-storage-network-using/</link><pubDate>Thu, 28 Mar 2019 19:59:00 +0800</pubDate><guid>https://shuzang.github.io/2019/swarm-storage-network-using/</guid><description>&lt;p>说实话，swarm的资料比较难找，倒是IPFS的比较多一点。最后只在&lt;a href="http://medium.com/" target="_blank">Medium&lt;/a>找到了一些，本篇文章就是在实践其中的一些项目，并通过这样来学习swarm。&lt;/p>
&lt;p>参考链接：&lt;a href="https://swarm-gateways.net/bzz:/theswarm.eth/" target="_blank">swarm官网&lt;/a>，&lt;a href="https://swarm-guide.readthedocs.io/en/latest/introduction.html" target="_blank">swarm文档&lt;/a>，&lt;a href="https://github.com/ethersphere" target="_blank">github项目&lt;/a>&lt;/p>
&lt;p>还有一些帮助理解的资料：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://ethereum.stackexchange.com/questions/55027/swarm-in-a-private-network" target="_blank">关于swarm的三个理解上的问题&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ethersphere/go-ethereum/wiki/IPFS-&amp;amp;-SWARM" target="_blank">swarm和ipfs的比较&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Solidity-gas limit问题</title><link>https://shuzang.github.io/2019/solidity-gas-limit%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 21 Mar 2019 22:00:00 +0800</pubDate><guid>https://shuzang.github.io/2019/solidity-gas-limit%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在搭建的以太坊私链上进行智能合约部署时，出现了以下问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">INFO&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mf">11.690&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nx">Served&lt;/span> &lt;span class="nx">eth_sendTransaction&lt;/span> &lt;span class="nx">reqid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">24&lt;/span> &lt;span class="nx">t&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">684.186&lt;/span>&lt;span class="nx">µs&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;exceeds block gas limit&amp;#34;&lt;/span>
&lt;span class="nb">Error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">exceeds&lt;/span> &lt;span class="nx">block&lt;/span> &lt;span class="nx">gas&lt;/span> &lt;span class="nx">limit&lt;/span> &lt;span class="kc">undefined&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>出现该错误的原因如错误描述，是当前合约所需的gas超过了区块的最大gas。这可能与参数gasLimit有关。在创世区块的配置文件中，我们使用了默认的配置值，为&lt;code>0x2fefd8&lt;/code>，转换为10进制即&lt;code>3141592&lt;/code>。&lt;/p>
&lt;p>注：&lt;a href="http://tool.oschina.net/hexconvert/" target="_blank">在线转换工具&lt;/a>&lt;/p></description></item><item><title>以太坊开发6-Docker搭建以太坊私链</title><link>https://shuzang.github.io/2019/use-docker-to-build-ethereum-private-chain/</link><pubDate>Tue, 12 Mar 2019 11:24:00 +0800</pubDate><guid>https://shuzang.github.io/2019/use-docker-to-build-ethereum-private-chain/</guid><description>&lt;p>在以太坊github的&lt;a href="https://github.com/ethereum/go-ethereum" target="_blank">官方项目地址&lt;/a>发现其支持Docker启动，同时因为Docker相对于虚拟机的易用性，决定尝试使用Docker搭建以太坊联盟链&lt;/p>
&lt;p>Docker安装部分查看自官方说明，搭建过程主要参考&lt;a href="https://www.jianshu.com/p/7994db7a2b89?from=singlemessage" target="_blank">简书-使用Docker搭建以太坊私有链并部署合约&lt;/a>&lt;/p>
&lt;h2 id="一docker安装">一、Docker安装&lt;/h2>
&lt;p>OS环境：Ubuntu 18.04 LTS(bionic)&lt;/p>
&lt;p>内核版本：4.18.0-16-generic&lt;/p>
&lt;p>处理器架构：amd64&lt;/p>
&lt;p>官方的安装说明位于：&lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank">Get Docker CE for Ubuntu&lt;/a>&lt;/p></description></item><item><title>以太坊开发5-以太坊节点连接到网络的几种方式</title><link>https://shuzang.github.io/2019/the-way-to-connect-to-the-network-about-ethereum-node/</link><pubDate>Tue, 12 Mar 2019 08:33:00 +0800</pubDate><guid>https://shuzang.github.io/2019/the-way-to-connect-to-the-network-about-ethereum-node/</guid><description>文章翻译自：Connecting to the network 如何寻找对等节点 在初始化时，geth会使用一组记录在源码中的bootstrap节点来连接。要指定这些节</description></item><item><title>以太坊开发4-geth console命令</title><link>https://shuzang.github.io/2019/geth-console-command/</link><pubDate>Fri, 08 Mar 2019 10:27:00 +0800</pubDate><guid>https://shuzang.github.io/2019/geth-console-command/</guid><description>&lt;p>Geth Console是一个交互式的JavaScript执行环境，其中&lt;code>&amp;gt;&lt;/code>是命令提示符。在这个环境里也内置了一些用来操作以太坊的JavaScript对象，可以直接使用这些对象。这些对象主要包括：&lt;/p>
&lt;ul>
&lt;li>eth：包含一些跟操作区块链相关的方法；&lt;/li>
&lt;li>net：包含一些查看p2p网络状态的方法；&lt;/li>
&lt;li>admin：包含一些与管理节点相关的方法；&lt;/li>
&lt;li>miner：包含启动&amp;amp;停止挖矿的一些方法；&lt;/li>
&lt;li>personal：主要包含一些管理账户的方法；&lt;/li>
&lt;li>txpool：包含一些查看交易内存池的方法；&lt;/li>
&lt;li>web3：包含了以上对象，还包含一些单位换算的方法。&lt;/li>
&lt;/ul></description></item><item><title>以太坊开发3-geth客户端命令</title><link>https://shuzang.github.io/2019/geth-client-use/</link><pubDate>Fri, 08 Mar 2019 09:26:00 +0800</pubDate><guid>https://shuzang.github.io/2019/geth-client-use/</guid><description>Geth是以太坊智能合约开发工具，是一个命令行工具，所以熟悉其命令参数有助于提高开发效率。本文是geth help的翻译，基于geth 1.8.</description></item><item><title>以太坊开发2-创世区块文件genesis.json</title><link>https://shuzang.github.io/2019/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%912-%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97%E6%96%87%E4%BB%B6genesis.json/</link><pubDate>Thu, 07 Mar 2019 19:48:00 +0800</pubDate><guid>https://shuzang.github.io/2019/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%912-%E5%88%9B%E4%B8%96%E5%8C%BA%E5%9D%97%E6%96%87%E4%BB%B6genesis.json/</guid><description>文件说明 关于genesis.json的官方说明位于两处 Private network Connecting to the network 每条区块链都以创世区块开头，而genesis.json正是创世区块的配置文</description></item><item><title>以太坊开发1-虚拟机搭建以太坊私链</title><link>https://shuzang.github.io/2019/use-virtual-machine-builds-ethereum-private-chain/</link><pubDate>Thu, 07 Mar 2019 14:53:00 +0800</pubDate><guid>https://shuzang.github.io/2019/use-virtual-machine-builds-ethereum-private-chain/</guid><description>一、单虚拟机 最简单的方式是使用一个虚拟机，这也是在条件有限的情况下的最好选择。方法是在一台虚拟机上启用多个终端，每个终端使用不同的端口通信。</description></item><item><title>区块链学习5-ETC和ETH</title><link>https://shuzang.github.io/2019/ethereum-and-ethereum-classic/</link><pubDate>Wed, 16 Jan 2019 10:48:00 +0800</pubDate><guid>https://shuzang.github.io/2019/ethereum-and-ethereum-classic/</guid><description>最近ETC遭受疑似51%攻击的影响很大，虽然最后的结果还没出来，仍不确定是真的遭受了51%攻击，还是之前官方所称的ASIC矿机测试带来的问题</description></item><item><title>区块链学习4-以太坊基础知识</title><link>https://shuzang.github.io/2018/ethereum-instruction/</link><pubDate>Tue, 11 Dec 2018 20:34:00 +0800</pubDate><guid>https://shuzang.github.io/2018/ethereum-instruction/</guid><description>1. 基本知识 基本知识需要了解两部分 第一部分是以太坊版本演进过程：白皮书——&amp;gt;黄皮书——&amp;gt;Frontier版本——&amp;gt;Homes</description></item><item><title>区块链学习3-区块链领域概况</title><link>https://shuzang.github.io/2018/overview-of-blockchain/</link><pubDate>Tue, 20 Nov 2018 14:25:00 +0800</pubDate><guid>https://shuzang.github.io/2018/overview-of-blockchain/</guid><description>&lt;p>本篇结束区块链领域概况，包括一些常见名词、核心技术、应用场景和学习区块链需要掌握的基础知识。&lt;/p></description></item><item><title>区块链学习2-比特币基本原理</title><link>https://shuzang.github.io/2018/bitcoin-fundamentals/</link><pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/bitcoin-fundamentals/</guid><description>&lt;p>区块链里最基本也是最重要的几个概念是&lt;strong>地址&lt;/strong>、&lt;strong>交易&lt;/strong>、&lt;strong>区块&lt;/strong>、&lt;strong>网络&lt;/strong>。比特币用地址来标识一笔交易的支出方和接收方。所有的交易最终需要被记到统一的账本（也就是区块链）上，而这个账本是通过区块确认并完成的。每一个新区块的产生，都会被打上时间戳（区块头里的一个字段，是真的时间，后面详细介绍），最终生成按照时间前后排列并加以记录的电子交易证明。每个独立节点之间又通过比特币网络来建立联系，这样就组成了一个去中心化、分布式的电子交易记录时间戳服务器系统。比特币通过构造这个分布式时间戳服务器来解决&lt;a href="https://baike.baidu.com/item/%E5%8F%8C%E9%87%8D%E6%94%AF%E4%BB%98/7046722?fr=aladdin" target="_blank">双重支付&lt;/a>问题。&lt;/p></description></item><item><title>区块链学习1-比特币的诞生</title><link>https://shuzang.github.io/2018/the-birth-of-bitcoin/</link><pubDate>Fri, 02 Nov 2018 14:02:00 +0800</pubDate><guid>https://shuzang.github.io/2018/the-birth-of-bitcoin/</guid><description>&lt;p>区块链作为比特币背后的技术架构，是随着比特币的出现而诞生的。因此，要讲区块链的诞生，我们就不得不从比特币的历史说起。&lt;/p></description></item></channel></rss>